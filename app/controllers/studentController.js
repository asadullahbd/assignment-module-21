import studentModel from "../models/studentModel.js";
import mongoose from "mongoose";
import bcrypt from "bcrypt";
import { fileURLToPath } from "url";
import path from "path";
import fs from "fs";
import fileNameModel from "./../models/fileNameModel.js";
const ObjectId = mongoose.Types.ObjectId;

export const getProfile = async (req, res) => {
    const email = req.student.email;
    console.log(email);
    try {
        const studentData = await studentModel.aggregate([
            {
                $match: {
                    email,
                },
            },
            {
                $project: {
                    _id: 0,
                    name: 1,
                    email: 1,
                    age: 1,
                    roll: 1,
                },
            },
        ]);
        if (studentData.length === 0) {
            return res.json({
                status: "failed",
                message: "Invalid credentials",
            });
        }

        return res.json({ status: "success", data: studentData[0] });
    } catch (error) {
        return res.json({ status: "failed", message: error.toString() });
    }
};

export const updateProfile = async (req, res) => {
    if (req.body.password && req.body.password.length > 0) {
        req.body.password = await bcrypt.hash(req.body.password, 10);
    }
    const newData = req.body;
    try {
        const updatedStudent = await studentModel.findOneAndUpdate(
            {
                email: req.student.email,
            },
            {
                $set: newData,
            },
            {
                new: true,
                projection: { _id: 0, name: 1, email: 1, age: 1, roll: 1 },
            }
        );

        if (!updatedStudent) {
            return res.json({
                status: "failed",
                message: "invalid credential",
            });
        }

        return res.json({ status: "success", data: updatedStudent });
    } catch (error) {
        return res.json({ status: "failed", message: error.toString() });
    }
};

export const uploadProfileImage = async (req, res) => {
    try {
        // Check if file is uploaded
        if (!req.file) {
            return res.json({ status: "failed", message: "No file uploaded" });
        }

        // Extract file information from multer
        const uploadedFile = {
            fileName: req.file.filename, // The file name generated by multer
            filePath: req.file.path, // The path where the file is saved
            fileType: req.file.mimetype, // The file's MIME type
        };
        // Insert file information into the database
        const fileNameFromDB = await fileNameModel.findOne({
            fileName: uploadedFile.fileName,
        });
        if (!fileNameFromDB) {
            await fileNameModel.create(uploadedFile);
        }
        return res.json({
            status: "success",
            message: "profile image uploaded to local storage of pc and on the database successfully",
        });
    } catch (error) {
        return res.json({ status: "failed", message: error.toString() });
    }
};

export const deleteProfileImage = async (req, res) => {
    try {
        const fileName = req.params.fileName; 

        const filePath = path.join(process.cwd(), "app", "uploads", fileName);

        if (fs.existsSync(filePath)) {
            fs.unlinkSync(filePath); 
            const deletedFromDB = await fileNameModel.deleteOne({ fileName }); 
            if (deletedFromDB.deletedCount === 0) {
                return res
                    .status(404)
                    .json({
                        status: "failed",
                        message: "File not found in the database",
                    });
            }
            return res.json({
                status: "success",
                message: "Profile image deleted successfully from local storage and also from the database",
            });
        } else {
            return res
                .status(404)
                .json({ status: "failed", message: "File not found" });
        }
    } catch (error) {
        return res.json({ status: "failed", message: error.toString() });
    }
};

export const getProfileImage = async (req, res) => {
    try {
        const filePath = path.join(process.cwd(), "app", "uploads", req.params.fileName);
        const profileImage = await fileNameModel.findOne({fileName:req.params.fileName});
        if(!profileImage){
            return res.status(404).json({ status: "failed", message: "File not found. provide valid file name" });
        }

        // Send the file to the client
        res.sendFile(filePath, (err) => {
            if (err) {
                console.error('Error sending file:', err);
                return res.status(err.status).end();
            }
        });
    } catch (error) {
        return res.json({ status: "failed", message: error.toString() });
    }
};
